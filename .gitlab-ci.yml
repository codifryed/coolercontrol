image: registry.gitlab.com/coolercontrol/coolercontrol/pipeline:v18

variables:
  CARGO_HOME: "$CI_PROJECT_DIR/.cargo"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/.npm"
  # https://gitlab.com/api/v4/projects/30707566/packages/generic/coolercontrol/$CI_COMMIT_TAG/
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/coolercontrol/${CI_COMMIT_TAG}"
  PACKAGE_REGISTRY_URL_BETA: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/coolercontrol/beta"
  ARTIFACT_NAME_APPIMAGE: "CoolerControl-x86_64.AppImage"
  ARTIFACT_NAME_APPIMAGE_DAEMON: "CoolerControlD-x86_64.AppImage"
  ARTIFACT_NAME_DEB: "coolercontrol_${CI_COMMIT_TAG}_amd64.deb"
  ARTIFACT_NAME_DEB_BOOKWORM: "coolercontrol_${CI_COMMIT_TAG}_amd64_bookworm.deb"
  ARTIFACT_NAME_RPM_OPENSUSE_TUMBLEWEED: "coolercontrol-${CI_COMMIT_TAG}-0.x86_64.rpm"
  CLOUDSMITH_REPOSITORY: "coolercontrol/coolercontrol"

stages:
  - test
  - build
  - test_packages
  - upload_packages
  - release

.cache_template: &cache_template
  cache:
    - key:
        files:
          - coolercontrol-ui/package-lock.json
      paths:
        - .npm
    - key:
        files:
          - coolercontrold/Cargo.lock
          - coolercontrol-ui/src-tauri/Cargo.lock
      paths:
        - .cargo
    - key: "${CI_JOB_NAME}"
      paths:
        - .cache/pip
        # this can add up over time to a very large cache and isn't very clean, but could speed up compilation:
        #- coolercontrold/target
        #- coolercontrol-ui/src-tauri/target

.main_image_template: &main_image_template
  before_script:
    - python3 --version
    - rustup --version
    - cargo --version
    - rustc --version
    - npm --version

# development pipeline tests
############################################################################################

test_all:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG == null
  needs: [ ]
  script:
    - make test -j4
  artifacts:
    when: always
    reports:
      junit: coolercontrold/results.xml


# compile all release artifacts
############################################################################################

# manual and automatic trigger for all artifacts & packages
compile_artifacts:
  stage: build
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: on_success
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: manual
      allow_failure: true
  needs: [ ]
  script:
    - echo "All release compilation jobs triggered."

####################################### AppImages (Deb Bullseye+)
build_appimages:
  image: registry.gitlab.com/coolercontrol/coolercontrol/deb-bullseye:v18
  <<: *cache_template
  <<: *main_image_template
  stage: build
  needs:
    - compile_artifacts
  # This merge request rule looks ridiculous, but is needed as merge_request triggers for pipelines are disabled by default
  rules:
    - if: $CI_PIPELINE_SOURCE
  before_script:
    - cat $GPG_KEY | gpg --batch --import
    # makes it non-interactive
    - echo $GPG_PHRASE | gpg --batch --always-trust --yes --passphrase-fd 0 --pinentry-mode=loopback -s $(mktemp)
  script:
    - make build-appimages -j3
    - make appimages -j2
    # bash can't find the appimage for whatever reason
    #- $CI_PROJECT_DIR/CoolerControlD-x86_64.AppImage --version
    #- $CI_PROJECT_DIR/CoolerControl-x86_64.AppImage --version
  artifacts:
    name: "CoolerControl_x86_64_${CI_COMMIT_SHORT_SHA}_AppImages"
    paths:
      - CoolerControlD-x86_64.AppImage
      - CoolerControlD-x86_64.AppImage.zsync
      - CoolerControl-x86_64.AppImage
      - CoolerControl-x86_64.AppImage.zsync
    expire_in: 14 days


####################################### Debian >=BookWorm Base Package
build_deb_bookworm:
  image: registry.gitlab.com/coolercontrol/coolercontrol/deb-bookworm:v18
  <<: *cache_template
  <<: *main_image_template
  stage: build
  needs:
    - compile_artifacts
  rules:
    - if: $CI_PIPELINE_SOURCE
  script:
    # install the build dependencies
    - >
      apt-get -y install 
      dh-python 
      pybuild-plugin-pyproject 
      python3-all 
      python3-build 
      liquidctl 
      python3-setproctitle 
      python3-fastapi 
      python3-uvicorn
    - cp -rf packaging/debian ./
    - dpkg-architecture -l
    - dpkg-buildpackage -us -B
    - rm -f coolercontrol-dbgsym*.*deb
  artifacts:
    name: "CoolerControl_x86_64_deb_${CI_COMMIT_SHORT_SHA}"
    paths:
      - coolercontrol*.deb
    exclude:
      - coolercontrol-dbgsym*.*deb
    expire_in: 14 days

####################################### Fedora 38
### Fedora builds now done on Copr. Possibly use this in the future for beta testing
#build_fedora_38:
#  image: registry.gitlab.com/coolercontrol/coolercontrol/fedora-38:v18
#  <<: *cache_template
#  <<: *main_image_template
#  stage: build
#  needs:
#    - compile_artifacts
#  rules:
#    - if: $CI_PIPELINE_SOURCE
#  script:
#    - cp -f packaging/fedora/coolercontrol.spec /root/rpmbuild/SPECS/
#    # ../ as we are inside a 'coolercontrol' directory, which suits our needs for ci tar-ing
#    - tar -cf /root/rpmbuild/SOURCES/CoolerControl.tar.gz ../
#    - cd /root/rpmbuild
#    - dnf builddep SPECS/coolercontrol.spec -y
#    # the standard 'rpmbuild -ba' also builds srpms, which turn out to be huge in our case and take forever
#    - rpmbuild -bb SPECS/coolercontrol.spec
#    - cd RPMS/x86_64/
#    - mv coolercontrol*.rpm ${CI_PROJECT_DIR}/
#    - cd ${CI_PROJECT_DIR}
#  artifacts:
#    name: "CoolerControl_x86_64_rpm_${CI_COMMIT_SHORT_SHA}"
#    paths:
#      - coolercontrol*.rpm
#    expire_in: 14 days

####################################### OpenSuse Tumbleweed
### This is a WIP
#build_opensuse_tumbleweed:
#  image: registry.gitlab.com/coolercontrol/coolercontrol/opensuse-tumbleweed:v18
#  <<: *cache_template
#  <<: *main_image_template
#  stage: build
#  needs:
#    - compile_artifacts
#    # run fedora-based package builds sequentially to avoid build issues running all 3 in parallel
#    - build_fedora_39
#  rules:
#    - if: $CI_PIPELINE_SOURCE
#  script:
#    # todo: we may want to vendor our cargo dependencies
#    - cp packaging/opensuse/coolercontrol.spec /root/rpmbuild/SPECS/
#    # ../ as we are inside a 'coolercontrol' directory, which suits our needs for ci tar-ing
#    - tar -cf /root/rpmbuild/SOURCES/CoolerControl.tar.gz ../
#    - cd /root/rpmbuild
#    - rpmbuild -bb SPECS/coolercontrol.spec
#    - cd RPMS/x86_64/
#    - mv coolercontrol*.rpm ${CI_PROJECT_DIR}/
#    - cd ${CI_PROJECT_DIR}
#  artifacts:
#    name: "CoolerControl_x86_64_rpm_${CI_COMMIT_SHORT_SHA}"
#    paths:
#      - coolercontrol*.rpm
#    expire_in: 14 days


# test installation of packages
############################################################################################

test_deb_bookworm:
  stage: test_packages
  image: amd64/debian:bookworm
  dependencies:
    - build_deb_bookworm
  needs:
    - build_deb_bookworm
  rules:
    - if: $CI_PIPELINE_SOURCE
  script:
    - apt update
    - DEBIAN_FRONTEND=noninteractive apt install -yq --no-install-recommends ./coolercontrol*amd64.deb
    - coolercontrold --version
    - coolercontrol-liqctld --version
    #- coolercontrol --version
    - apt remove -y coolercontrol

test_deb_ubuntu_22.04:
  stage: test_packages
  image: ubuntu:jammy
  dependencies:
    - build_deb_bullseye
  needs:
    - build_deb_bullseye
  rules:
    - if: $CI_PIPELINE_SOURCE
  script:
    - apt update
    - DEBIAN_FRONTEND=noninteractive apt install -yq --no-install-recommends ./coolercontrol*amd64.deb
    - coolercontrold --version
    - coolercontrol-liqctld --version
    - coolercontrol --version
    - apt remove -y coolercontrol

#test_fedora_38:
#  stage: test_packages
#  image: fedora:38
#  dependencies:
#    - build_fedora_38
#  needs:
#    - build_fedora_38
#  rules:
#    - if: $CI_PIPELINE_SOURCE
#  script:
#    - yum -y localinstall ./coolercontrol*64.rpm
#    - coolercontrold --version
#    - coolercontrol-liqctld --version
#    - coolercontrol --version
#    - yum -y remove coolercontrol

#test_opensuse_tumbleweed:
#  stage: test_packages
#  image: opensuse/tumbleweed
#  dependencies:
#    - build_opensuse_tumbleweed
#  needs:
#    - build_opensuse_tumbleweed
#  rules:
#    - if: $CI_PIPELINE_SOURCE
#  script:
#    - ls -lah
#    - ls coolercontrol*
#    # works when doing this manually in the docker image, but not in the CI pipeline???
#    #- zypper install -y --allow-unsigned-rpm ./coolercontrol*64.rpm
#    - zypper install -y hicolor-icon-theme
#    - rpm -ivh ./coolercontrol*64.rpm
#    - coolercontrold --version
#    - coolercontrol-liqctld --version
#    - coolercontrol --version
#    - zypper rm -y --clean-deps coolercontrol


# Upload Packages
############################################################################################
upload_package_appimage:
  stage: upload_packages
  image: curlimages/curl:latest
  dependencies:
    - build_appimages
  needs:
    - build_appimages
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARTIFACT_NAME_APPIMAGE} "${PACKAGE_REGISTRY_URL}/${ARTIFACT_NAME_APPIMAGE}" &
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARTIFACT_NAME_APPIMAGE}.zsync "${PACKAGE_REGISTRY_URL}/${ARTIFACT_NAME_APPIMAGE}.zsync" &
      wait
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARTIFACT_NAME_APPIMAGE_DAEMON} "${PACKAGE_REGISTRY_URL}/${ARTIFACT_NAME_APPIMAGE_DAEMON}" &
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARTIFACT_NAME_APPIMAGE_DAEMON}.zsync "${PACKAGE_REGISTRY_URL}/${ARTIFACT_NAME_APPIMAGE_DAEMON}.zsync" &
      wait

upload_package_appimage_beta:
  stage: upload_packages
  image: curlimages/curl:latest
  dependencies:
    - build_appimages
  needs:
    - build_appimages
  rules:
    - if: $CI_PIPELINE_SOURCE && $CI_COMMIT_TAG == null
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARTIFACT_NAME_APPIMAGE} "${PACKAGE_REGISTRY_URL_BETA}/${ARTIFACT_NAME_APPIMAGE}"
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARTIFACT_NAME_APPIMAGE_DAEMON} "${PACKAGE_REGISTRY_URL_BETA}/${ARTIFACT_NAME_APPIMAGE_DAEMON}"

upload_package_deb_bookworm:
  stage: upload_packages
  image: registry.gitlab.com/coolercontrol/coolercontrol/cloudsmith-cli:v14
  dependencies:
    - build_deb_bookworm
  needs:
    - build_deb_bookworm
    - test_deb_bookworm
    - test_deb_ubuntu_22.04
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - cp $ARTIFACT_NAME_DEB $ARTIFACT_NAME_DEB_BOOKWORM
    # 22.04 (LTS) based:
    - cloudsmith push deb $CLOUDSMITH_REPOSITORY/debian/bookworm $ARTIFACT_NAME_DEB
    - cloudsmith push deb $CLOUDSMITH_REPOSITORY/ubuntu/jammy $ARTIFACT_NAME_DEB
    - cloudsmith push deb $CLOUDSMITH_REPOSITORY/pop/jammy $ARTIFACT_NAME_DEB
    # not yet available on CloudSmith:
    #- cloudsmith push deb $CLOUDSMITH_REPOSITORY/elementaryos/horus $ARTIFACT_NAME_DEB
    - cloudsmith push deb $CLOUDSMITH_REPOSITORY/linuxmint/vanessa $ARTIFACT_NAME_DEB
    # not yet available on CloudSmith:
    #- cloudsmith push deb $CLOUDSMITH_REPOSITORY/linuxmint/vera $ARTIFACT_NAME_DEB
    #- cloudsmith push deb $CLOUDSMITH_REPOSITORY/linuxmint/victoria $ARTIFACT_NAME_DEB
    # 22.10 based:
    - cloudsmith push deb $CLOUDSMITH_REPOSITORY/ubuntu/kinetic $ARTIFACT_NAME_DEB
    # 23.04 based:
    - cloudsmith push deb $CLOUDSMITH_REPOSITORY/ubuntu/lunar $ARTIFACT_NAME_DEB
    # 23.10 based:
    - cloudsmith push deb $CLOUDSMITH_REPOSITORY/ubuntu/mantic $ARTIFACT_NAME_DEB
    # Debian Testing based:
    - cloudsmith push deb $CLOUDSMITH_REPOSITORY/kali/kali-rolling $ARTIFACT_NAME_DEB
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARTIFACT_NAME_DEB_BOOKWORM} "${PACKAGE_REGISTRY_URL}/${ARTIFACT_NAME_DEB_BOOKWORM}"

upload_package_deb_bookworm_beta:
  stage: upload_packages
  image: curlimages/curl:latest
  variables:
    ARTIFACT_NAME_DEB_BOOKWORM_BETA: "coolercontrol_beta_amd64_bookworm.deb"
  dependencies:
    - build_deb_bookworm
  needs:
    - build_deb_bookworm
    - test_deb_bookworm
    - test_deb_ubuntu_22.04
  rules:
    - if: $CI_PIPELINE_SOURCE && $CI_COMMIT_TAG == null
  script:
    - cp coolercontrol*_amd64.deb $ARTIFACT_NAME_DEB_BOOKWORM_BETA
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARTIFACT_NAME_DEB_BOOKWORM_BETA} "${PACKAGE_REGISTRY_URL_BETA}/${ARTIFACT_NAME_DEB_BOOKWORM_BETA}"

#upload_package_fedora_38_beta:
#  stage: upload_packages
#  image: curlimages/curl:latest
#  variables:
#    ARTIFACT_NAME_RPM_FEDORA_38_BETA: "coolercontrol-beta-0.fc38.x86_64.rpm"
#  dependencies:
#    - build_fedora_38
#  needs:
#    - build_fedora_38
#    - test_fedora_38
#  rules:
#    - if: $CI_PIPELINE_SOURCE && $CI_COMMIT_TAG == null
#  script:
#    - cp coolercontrol*.fc38.x86_64.rpm ${ARTIFACT_NAME_RPM_FEDORA_38_BETA}
#    - |
#      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARTIFACT_NAME_RPM_FEDORA_38_BETA} "${PACKAGE_REGISTRY_URL_BETA}/${ARTIFACT_NAME_RPM_FEDORA_38_BETA}"

#upload_package_opensuse_tumbleweed:
#  stage: upload_packages
#  image: registry.gitlab.com/coolercontrol/coolercontrol/cloudsmith-cli:v14
#  dependencies:
#    - build_opensuse_tumbleweed
#  needs:
#    - build_opensuse_tumbleweed
#    - test_opensuse_tumbleweed
#  rules:
#    - if: $CI_COMMIT_TAG
#  script:
#    - |
#      cloudsmith push rpm $CLOUDSMITH_REPOSITORY/opensuse/tumbleweed $ARTIFACT_NAME_RPM_OPENSUSE_TUMBLEWEED &
#      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARTIFACT_NAME_RPM_OPENSUSE_TUMBLEWEED} "${PACKAGE_REGISTRY_URL}/${ARTIFACT_NAME_RPM_OPENSUSE_TUMBLEWEED}" &
#      wait
#
#upload_package_opensuse_tumbleweed_beta:
#  stage: upload_packages
#  image: curlimages/curl:latest
#  variables:
#    ARTIFACT_NAME_RPM_OPENSUSE_TUMBLEWEED_BETA: "coolercontrol-beta-0.x86_64.rpm"
#  dependencies:
#    - build_opensuse_tumbleweed
#  needs:
#    - build_opensuse_tumbleweed
#    - test_opensuse_tumbleweed
#  rules:
#    - if: $CI_PIPELINE_SOURCE && $CI_COMMIT_TAG == null
#  script:
#    - cp coolercontrol*.x86_64.rpm ${ARTIFACT_NAME_RPM_OPENSUSE_TUMBLEWEED_BETA}
#    - |
#      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARTIFACT_NAME_RPM_OPENSUSE_TUMBLEWEED_BETA} "${PACKAGE_REGISTRY_URL_BETA}/${ARTIFACT_NAME_RPM_OPENSUSE_TUMBLEWEED_BETA}"


# Create Release
############################################################################################
create_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - upload_package_appimage
    - upload_package_deb_bookworm
  # - upload_package_opensuse_tumbleweed
  before_script:
    - echo 'Starting release job'
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "running release job for v${CI_COMMIT_TAG:?}"
    - awk -v ver="${CI_COMMIT_TAG:?}" '/^#+ \[/ { if (p) { exit }; if ($2 == "["ver"]") { p=1; next} } p && NF' ./CHANGELOG.md > ./description.txt
  release:
    name: 'CoolerControl v$CI_COMMIT_TAG'
    description: './description.txt'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'
    milestones:
      - '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'AppImage Daemon'
          filepath: "/packages/${ARTIFACT_NAME_APPIMAGE_DAEMON}"
          url: "${PACKAGE_REGISTRY_URL}/${ARTIFACT_NAME_APPIMAGE_DAEMON}"
          link_type: package
        - name: 'AppImage GUI'
          filepath: "/packages/${ARTIFACT_NAME_APPIMAGE}"
          url: "${PACKAGE_REGISTRY_URL}/${ARTIFACT_NAME_APPIMAGE}"
          link_type: package
        - name: 'Debian Bookworm / Ubuntu 22.04'
          filepath: "/packages/${ARTIFACT_NAME_DEB_BOOKWORM}"
          url: "${PACKAGE_REGISTRY_URL}/${ARTIFACT_NAME_DEB_BOOKWORM}"
          link_type: package
#        - name: 'OpenSuse Tumbleweed'
#          filepath: "/packages/${ARTIFACT_NAME_RPM_OPENSUSE_TUMBLEWEED}"
#          url: "${PACKAGE_REGISTRY_URL}/${ARTIFACT_NAME_RPM_OPENSUSE_TUMBLEWEED}"
#          link_type: package
